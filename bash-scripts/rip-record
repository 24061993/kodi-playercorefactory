#!/bin/bash

#+==========================================================+#
# rip-record - execute ffmpeg commands based on matching url #
#+==========================================================+#

# diagram of how the script works
# [rip-record] > [(text file with url|url on command line)] > [case-statement -match url] > [grep -extract strings] > [ffmpeg]

#+=========================================================+#
# exit status																#
#+=========================================================+#

SUCCESS=0
E_NOARGS=65

#+=========================================================+#
# display script usage when script is run with no arguments #
# + or when invalid input is entered by the user				#
#+=========================================================+#

script_usage="Usage: $(basename $0) [(http|https|rtmp|rtmpe)://domain.com/video(.mp4|.mkv|.m3u8|.avi|.flv)] ([-t] [00:00:00])"

#+=========================================================+#
# validate user input for first, second and third arguments #
# + passed to script	by matching with regular expressions	#
#+=========================================================+#

first_arg_validated="^(http|https|rtmp|rtmpe)://*" # matches: http|https|rtmp|rtmpe
second_arg_validated="^-t$"								# matches: -t
third_arg_validated="^[0-9]{2}:[0-9]{2}:[0-9]{2}$" # matches: 00:00:00

#+========================================================+#
# second and third arguments passed to script are used	  #
# + to specify a recording duration								  #
#+========================================================+#

tflag="$2" 		# second argument should be: -t
duration="$3"	# third argument should be in this format: 00:00:00

#+========================================================+#
# check if first argument is a url in a text file 			  #
# + or a url on the command line									  #
#+========================================================+#

if [[ "$1" =~ \.txt$ ]]; then # - text file passed as first argument to script
	videourl=$(cat "$1")  		# + cat the text file to extract the url
else
	videourl="$1"					# url is on the command line
fi

#+========================================================+#
# check if 1 or 3 arguments are passed to script			  #
#+========================================================+#

if [[ $# -eq 1 ]]; then											# - one argument is passed to the script
	if ! [[ $videourl =~ $first_arg_validated ]]; then # + if videourl doesnt start with: http|https|rtmp|rtmpe
		printf "%s\n" "'$videourl' invalid input"			# + display the url the user entered with error message
	   printf "%s\n" "$script_usage"							# + show script usage
		exit "$E_NOARGS" 											# + exit
	fi
elif [[ $# -eq 3 ]]; then										# - three arguments are passed to the script
	if ! [[ $videourl =~ $first_arg_validated ]]; then # + if videourl doesnt start with http|https|rtmp|rtmpe
		printf "%s\n" "'$videourl' invalid input"			# + display the url the user entered with error message
	   printf "%s\n" "$script_usage"							# + show script usage
		exit "$E_NOARGS" 											# + exit
	elif ! [[ $tflag =~ $second_arg_validated ]]; then # - if second argument passed to the script is not: -t
		printf "%s\n" "'$2' invalid input"					# + display user input with error message
	   printf "%s\n" "$script_usage"							# + show script usage
		exit "$E_NOARGS" 											# + exit
	else ! [[ $duration =~ $third_arg_validated ]]		# - if third argument doesnt match 00:00:00
		printf "%s\n" "'$3' invalid input"					# + display user input with error message
   	printf "%s\n" "$script_usage"							# + show script usage
		exit "$E_NOARGS" 											# + exit
	fi
else																	# - no arguments are passed to the script
   printf "%s\n" "$script_usage"								# + display script usage
	exit "$E_NOARGS" 												# + exit
fi

#+========================================================+#
# enable shell globbing for pattern matching					  #
#+========================================================+#

shopt -s extglob 

#+========================================================+#
# video recording file path										  #
#+========================================================+#

recordingfile="$HOME/Desktop/video-$(date +"%Y-%m-%d-%H-%M-%S").mkv" 

#+========================================================+#
# case statement switch on pattern match						  #
#+========================================================+#

videofile="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)"
m3u8="@(http|https)://[a-zA-Z0-9:0-9./?=_,@\&%-]*\.m3u8"
m3u8token="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.m3u8\?token=[a-zA-Z0-9\&=]*"
xforward="@(http|https)://[a-zA-Z0-9./?=_@%-]*\.m3u8\|X-Forwarded-For=+([0-9])\.+([0-9])\.+([0-9])\.+([0-9])"
useref="@(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.@(mkv|mp4|avi|flv)\|[uU]ser-[aA]gent=[a-zA-Z0-9/.()[:blank:],:;%+-]*\&[rR]eferer=@(http|https)@(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*"

#+========================================================+#
# grep inside url to extract strings							  #
#+========================================================+#

videofile_case=$(printf "%s" "$videourl" | grep -Eo '(http|https)://[a-zA-Z0-9:0-9./?=_@%-]*\.(mkv|mp4|avi|flv)')
m3u8_case=$(printf "%s" "$videourl" | grep -Eo '(http|https)://[a-zA-Z0-9:0-9./?=_,@&%-]*\.(m3u8)')
useragent=$(printf "%s" "$videourl" | grep -Eo 'u?User-a?Agent=[a-zA-Z0-9/.()[:blank:],:;%+_-]*[^&]')
referer=$(printf "%s" "$videourl" | grep -Eo 'r?Referer=(http|https)(://|%3A%2F%2F)[a-zA-Z%0-9./?=_-]*'| sed 's/[r-R]eferer=//')
xforwardip=$(printf "%s" "$videourl" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')


#+========================================================+#
# case statement with regular expression 						  #
# + to execute ffmpeg commands based on matching url		  #
#+========================================================+#

case "$videourl" in
	$videofile)     # video file
		echo ffmpeg -hide_banner -i "$videofile_case" -c:v copy -c:a copy "$tflag" "$duration" "$recordingfile";;
	$m3u8)          # m3u8 playlist
		ffmpeg -hide_banner -loglevel error -i "$videourl" \
		-c:v copy -bsf:a aac_adtstoasc "$tflag" "$duration" "$recordingfile";;
	$m3u8token)     # m3u8 playlist + token
		ffmpeg -hide_banner -loglevel error -i "$videourl" \
		-bsf:v mpeg4_unpack_bframes -bsf:a aac_adtstoasc "$tflag" "$duration" "$recordingfile";;
	$xforward)      # xforward
		ffmpeg -hide_banner -headers 'X-Forwarded-For: '"$xforwardip"''$'\r\n' -i "$m3u8_case" \
		-c:v copy -bsf:a aac_adtstoasc "$tflag" "$duration" "$recordingfile";;
	$useref)        # useragent referer
		ffmpeg -hide_banner -user-agent "$useragent" -headers 'Referer: '"$referer"''$'\r\n' \
		-i "$videofile_case" -c:v copy -c:a copy "$tflag" "$duration" "$recordingfile";;
	$m3u8useragent) # m3u8 user agent
		echo ffmpeg -hide_banner -loglevel error \
		-c:v copy -bsf:a aac_adtstoasc "$tflag" "$duration" "$recordingfile";;
	*) 		       # wildcard
		#ffmpeg -hide_banner -i "$videourl" -c:v copy -c:a copy "$tflag" "$duration" "$recordingfile";; 
		echo 'not found';;
esac 

#+========================================================+#
# turn off shell globbing											  #
#+========================================================+#

shopt -u extglob 
