#!/bin/bash

#+==========================================================+#
# rip-play-vlc - execute vlc commands based on matching url  #
#+==========================================================+#

# diagram of how the script works
# [rip-play-vlc] > [(text file with url|url on command line)] > [case-statement -match url] > [grep -extract strings] > [vlc]

#+=========================================================+#
# source external file containing regular expressions			#
#+=========================================================+#

source $HOME/git/kodi-playercorefactory/bash-scripts/rip-config

#+=========================================================+#
# exit status and error codes											#
#+=========================================================+#

SUCCESS=0		# success exit code
E_NOARGS=65		# no arguments passed to script
E_NOMATCH=66	# url not matched by regular expression

#+=========================================================+#
# display script usage when script is run with no arguments #
# + or when invalid input is entered by the user				#
#+=========================================================+#

script_usage="Usage: $(basename "$0") [(http|https|rtmp|rtmpe)://example.com/video-url]"

#+=========================================================+#
# validate user input for first argument                    #
# + passed to script	by matching with regular expressions	#
#+=========================================================+#

first_arg_validated="^(http|https|rtmp|rtmpe)://*" # matches: http|https|rtmp|rtmpe

#+========================================================+#
# check if first argument is a url in a text file 			  #
# + or a url on the command line									  #
#+========================================================+#

if [[ "$1" =~ \.txt$ ]]; then # - text file passed as first argument to script
	videourl=$(cat "$1")  		# + cat the text file to extract the url
else
	videourl="$1"					# url is on the command line
fi

#+========================================================+#
# check if 1 argument is  passed to script			        #
# + and validate user input										  #
#+========================================================+#

if [[ $# -eq 1 ]]; then											# - one argument is passed to the script
	if ! [[ $videourl =~ $first_arg_validated ]]; then # + if videourl doesnt match validation regular expression
		printf "%s\n" "'$videourl' invalid input"			# + display invalid user input with error message
		printf "%s\n" "$script_usage"							# + display script usage
		exit "$E_NOMATCH"											# + exit with E_NOMATCH error code
	fi
else [[ $# -eq 0 ]]												# - no arguments are passed to the script
   printf "%s\n" "$script_usage"								# + display script usage
	exit "$E_NOARGS" 												# + exit with E_NOARGS error code
fi

#+========================================================+#
# enable shell globbing for pattern matching					  #
#+========================================================+#

shopt -s extglob 

#+========================================================+#
# case statement with regular expression 						  #
# + to execute ffmpeg commands based on matching url		  #
#+========================================================+#

case "$videourl" in
	$videofile)         # video file
		vlc "$videofile_grep";;
	$m3u8)              # m3u8 playlist
		vlc "$videourl";;
	$m3u8token)         # m3u8 playlist + token
		vlc "$videourl";;
	$xforward)          # xforward
		wget -c --header="X-Forwarded-For: $xforwardip" "$m3u8_grep" -O- | vlc fd://0;;
	$useref)            # useragent referer
		wget -c -U "$useragent" --header="Referer: $referer" "$videofile_grep" -O- | vlc fd://0;;
	$m3u8useragent)     # m3u8 user agent 
		wget -c -U "$useragent" "$m3u8_grep" -O- | vlc fd://0;;
	$m3u8uagentreferer) # m3u8 useragent referer
		mpv --user-agent="$useragent" --referrer="$referer" "$m3u8_grep";;
	$refuseragent)      # referer user agent
		mpv --referrer="$referer" --user-agent="$useragent" "$videofile_grep";;
	$rtmp)              # rtmp
		rtmpdump -q -i "$videourl" | vlc fd://0;;
	$cookiem3u8)        # cookie m3u8
		mpv --http-header-fields="cookie: $cookieurl","path=/: $cookiedomain" "$videourl";;
	$cookiem3u8uagent)  # cookie m3u8 useragent
		mpv --user-agent="$useragent2" --http-header-fields="cookie: $cookiemedia","path=/: $cookiedomain" "$m3u8_grep";;
	$http)              # http
		vlc "$videourl";;
	*) 		           # wildcard
		vlc "$videourl";;
esac 

#+========================================================+#
# turn off shell globbing											  #
#+========================================================+#

shopt -u extglob 

#+========================================================+#
# exit status SUCCESS if script runs without errors		  #
#+========================================================+#

exit "$SUCCESS"
